from bisection_solver import bisection_method

def test_bisection_method():

    # Test 1
    f1 = lambda x: x**2 - 4
    root1 = bisection_method(f1, 0, 5, tol=1e-6)
    assert abs(root1 - 2) < 1e-6, "Test 1 failed"
    print("Test 1 passed")

    # Test 2
    f2 = lambda x: x**3 - 6*x**2 + 11*x - 6
    root2 = bisection_method(f2, 1.5, 2.5, tol=1e-6)
    assert abs(root2 - 2) < 1e-6, "Test 2 failed"
    print("Test 2 passed")

    # Test 3
    f3 = lambda x: x**2 + 1  # No real root
    try:
        bisection_method(f3, -2, 2)
        assert False, "Test 3 failed (Expected ValueError)"
    except ValueError:
        print("Test 3 passed")

    # Test 4 (a == b)
    try:
        bisection_method(f1, 3, 3)
        assert False, "Test 4 failed (Expected ValueError)"
    except ValueError:
        print("Test 4 passed")

    # Test 5 f(a) and f(b) have same signs
    try:
        bisection_method(f1, 3, 5)  # f(3) and f(5) are both positive
        assert False, "Test 5 failed (Expected ValueError)"
    except ValueError:
        print("Test 5 passed")

    print("All tests passed")

# Run tests
if __name__ == "__main__":
    test_bisection_method()
